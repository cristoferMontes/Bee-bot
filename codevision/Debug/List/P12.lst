
AVRASM ver. 2.1.30  D:\OneDrive - Instituto Politecnico Nacional\Semestre 6\Sistemas en chip\p12\codevision\Debug\List\P12.asm Tue Dec 20 19:26:52 2022

D:\OneDrive - Instituto Politecnico Nacional\Semestre 6\Sistemas en chip\p12\codevision\Debug\List\P12.asm(1415): warning: Register r5 already defined by the .DEF directive
D:\OneDrive - Instituto Politecnico Nacional\Semestre 6\Sistemas en chip\p12\codevision\Debug\List\P12.asm(1416): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.49a 
                 ;(C) Copyright 1998-2022 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8535
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x20
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R5
                 	.DEF _j=R4
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c021      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 _motor:
000015 2211
000016 1221      	.DB  0x11,0x22,0x21,0x12
                 _disp7seg:
000017 1c23
000018 0f39      	.DB  0x23,0x1C,0x39,0xF
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000019 2aaa      	.DW  0x2AAA
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001a 0000      	.DB  0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
00001b 0002      	.DW  0x02
00001c 0002      	.DW  0x02
00001d 0032      	.DW  __REG_BIT_VARS*2
                 
00001e 0002      	.DW  0x02
00001f 0004      	.DW  0x04
000020 0034      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000021 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000022 94f8      	CLI
000023 27ee      	CLR  R30
000024 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000025 e0f1      	LDI  R31,1
000026 bffb      	OUT  GICR,R31
000027 bfeb      	OUT  GICR,R30
000028 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000029 e08d      	LDI  R24,(14-2)+1
00002a e0a2      	LDI  R26,2
00002b 27bb      	CLR  R27
                 __CLEAR_REG:
00002c 93ed      	ST   X+,R30
00002d 958a      	DEC  R24
00002e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00002f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000030 e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000031 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000032 93ed      	ST   X+,R30
000033 9701      	SBIW R24,1
000034 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000035 e3e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000036 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000037 9185      	LPM  R24,Z+
000038 9195      	LPM  R25,Z+
000039 9700      	SBIW R24,0
00003a f061      	BREQ __GLOBAL_INI_END
00003b 91a5      	LPM  R26,Z+
00003c 91b5      	LPM  R27,Z+
00003d 9005      	LPM  R0,Z+
00003e 9015      	LPM  R1,Z+
00003f 01bf      	MOVW R22,R30
000040 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000041 9005      	LPM  R0,Z+
000042 920d      	ST   X+,R0
000043 9701      	SBIW R24,1
000044 f7e1      	BRNE __GLOBAL_INI_LOOP
000045 01fb      	MOVW R30,R22
000046 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000047 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000048 bfed      	OUT  SPL,R30
000049 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004b eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004c e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004d c000      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void checarAdelante();
                 ;void checarAtras();
                 ;void checarIzq();
                 ;void checarDer();
                 ;void checarGo();
                 ;void checarPause();
                 ;void checarClr();
                 ;unsigned char checarEspacio();
                 ;void main(void)
                 ; 0000 0042 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0043 // Declare your local variables here
                 ; 0000 0044 
                 ; 0000 0045 // Input/Output Ports initialization
                 ; 0000 0046 // Port A initialization
                 ; 0000 0047 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0048 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
00004e efef      	LDI  R30,LOW(255)
00004f bbea      	OUT  0x1A,R30
                 ; 0000 0049 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 004A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000050 e0e0      	LDI  R30,LOW(0)
000051 bbeb      	OUT  0x1B,R30
                 ; 0000 004B 
                 ; 0000 004C // Port B initialization
                 ; 0000 004D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004E DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000052 bbe7      	OUT  0x17,R30
                 ; 0000 004F // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 0050 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
000053 efef      	LDI  R30,LOW(255)
000054 bbe8      	OUT  0x18,R30
                 ; 0000 0051 
                 ; 0000 0052 // Port C initialization
                 ; 0000 0053 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0054 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000055 bbe4      	OUT  0x14,R30
                 ; 0000 0055 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0056 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000056 e0e0      	LDI  R30,LOW(0)
000057 bbe5      	OUT  0x15,R30
                 ; 0000 0057 
                 ; 0000 0058 // Port D initialization
                 ; 0000 0059 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005A DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000058 bbe1      	OUT  0x11,R30
                 ; 0000 005B // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 005C PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
000059 efef      	LDI  R30,LOW(255)
00005a bbe2      	OUT  0x12,R30
                 ; 0000 005D 
                 ; 0000 005E // Timer/Counter 0 initialization
                 ; 0000 005F // Clock source: System Clock
                 ; 0000 0060 // Clock value: Timer 0 Stopped
                 ; 0000 0061 // Mode: Normal top=0xFF
                 ; 0000 0062 // OC0 output: Disconnected
                 ; 0000 0063 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00005b e0e0      	LDI  R30,LOW(0)
00005c bfe3      	OUT  0x33,R30
                 ; 0000 0064 TCNT0=0x00;
00005d bfe2      	OUT  0x32,R30
                 ; 0000 0065 OCR0=0x00;
00005e bfec      	OUT  0x3C,R30
                 ; 0000 0066 
                 ; 0000 0067 // Timer/Counter 1 initialization
                 ; 0000 0068 // Clock source: System Clock
                 ; 0000 0069 // Clock value: Timer1 Stopped
                 ; 0000 006A // Mode: Normal top=0xFFFF
                 ; 0000 006B // OC1A output: Disconnected
                 ; 0000 006C // OC1B output: Disconnected
                 ; 0000 006D // Noise Canceler: Off
                 ; 0000 006E // Input Capture on Falling Edge
                 ; 0000 006F // Timer1 Overflow Interrupt: Off
                 ; 0000 0070 // Input Capture Interrupt: Off
                 ; 0000 0071 // Compare A Match Interrupt: Off
                 ; 0000 0072 // Compare B Match Interrupt: Off
                 ; 0000 0073 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00005f bdef      	OUT  0x2F,R30
                 ; 0000 0074 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000060 bdee      	OUT  0x2E,R30
                 ; 0000 0075 TCNT1H=0x00;
000061 bded      	OUT  0x2D,R30
                 ; 0000 0076 TCNT1L=0x00;
000062 bdec      	OUT  0x2C,R30
                 ; 0000 0077 ICR1H=0x00;
000063 bde7      	OUT  0x27,R30
                 ; 0000 0078 ICR1L=0x00;
000064 bde6      	OUT  0x26,R30
                 ; 0000 0079 OCR1AH=0x00;
000065 bdeb      	OUT  0x2B,R30
                 ; 0000 007A OCR1AL=0x00;
000066 bdea      	OUT  0x2A,R30
                 ; 0000 007B OCR1BH=0x00;
000067 bde9      	OUT  0x29,R30
                 ; 0000 007C OCR1BL=0x00;
000068 bde8      	OUT  0x28,R30
                 ; 0000 007D 
                 ; 0000 007E // Timer/Counter 2 initialization
                 ; 0000 007F // Clock source: System Clock
                 ; 0000 0080 // Clock value: Timer2 Stopped
                 ; 0000 0081 // Mode: Normal top=0xFF
                 ; 0000 0082 // OC2 output: Disconnected
                 ; 0000 0083 ASSR=0<<AS2;
000069 bde2      	OUT  0x22,R30
                 ; 0000 0084 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00006a bde5      	OUT  0x25,R30
                 ; 0000 0085 TCNT2=0x00;
00006b bde4      	OUT  0x24,R30
                 ; 0000 0086 OCR2=0x00;
00006c bde3      	OUT  0x23,R30
                 ; 0000 0087 
                 ; 0000 0088 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0089 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00006d bfe9      	OUT  0x39,R30
                 ; 0000 008A 
                 ; 0000 008B // External Interrupt(s) initialization
                 ; 0000 008C // INT0: Off
                 ; 0000 008D // INT1: Off
                 ; 0000 008E // INT2: Off
                 ; 0000 008F MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00006e bfe5      	OUT  0x35,R30
                 ; 0000 0090 MCUCSR=(0<<ISC2);
00006f bfe4      	OUT  0x34,R30
                 ; 0000 0091 
                 ; 0000 0092 // USART initialization
                 ; 0000 0093 // USART disabled
                 ; 0000 0094 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000070 b9ea      	OUT  0xA,R30
                 ; 0000 0095 
                 ; 0000 0096 // Analog Comparator initialization
                 ; 0000 0097 // Analog Comparator: Off
                 ; 0000 0098 // The Analog Comparator's positive input is
                 ; 0000 0099 // connected to the AIN0 pin
                 ; 0000 009A // The Analog Comparator's negative input is
                 ; 0000 009B // connected to the AIN1 pin
                 ; 0000 009C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000071 e8e0      	LDI  R30,LOW(128)
000072 b9e8      	OUT  0x8,R30
                 ; 0000 009D SFIOR=(0<<ACME);
000073 e0e0      	LDI  R30,LOW(0)
000074 bfe0      	OUT  0x30,R30
                 ; 0000 009E 
                 ; 0000 009F // ADC initialization
                 ; 0000 00A0 // ADC disabled
                 ; 0000 00A1 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000075 b9e6      	OUT  0x6,R30
                 ; 0000 00A2 
                 ; 0000 00A3 // SPI initialization
                 ; 0000 00A4 // SPI disabled
                 ; 0000 00A5 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000076 b9ed      	OUT  0xD,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // TWI initialization
                 ; 0000 00A8 // TWI disabled
                 ; 0000 00A9 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000077 bfe6      	OUT  0x36,R30
                 ; 0000 00AA 
                 ; 0000 00AB while (1)
                 _0x3:
                 ; 0000 00AC {
                 ; 0000 00AD // Place your code here
                 ; 0000 00AE checarAdelante();
000078 d008      	RCALL _checarAdelante
                 ; 0000 00AF checarAtras();
000079 d024      	RCALL _checarAtras
                 ; 0000 00B0 checarIzq();
00007a d040      	RCALL _checarIzq
                 ; 0000 00B1 checarDer();
00007b d05c      	RCALL _checarDer
                 ; 0000 00B2 checarGo();
00007c d078      	RCALL _checarGo
                 ; 0000 00B3 checarPause();
00007d d0a6      	RCALL _checarPause
                 ; 0000 00B4 checarClr();
00007e d0bc      	RCALL _checarClr
                 ; 0000 00B5 }
00007f cff8      	RJMP _0x3
                 ; 0000 00B6 }
                 _0x6:
000080 cfff      	RJMP _0x6
                 ; .FEND
                 ;void checarAdelante(){
                 ; 0000 00B8 void checarAdelante(){
                 _checarAdelante:
                 ; .FSTART _checarAdelante
                 ; 0000 00B9 if( checarEspacio() ){
000081 d0e6      	RCALL SUBOPT_0x0
000082 f0c9      	BREQ _0x7
                 ; 0000 00BA if(adelante==0) adea=0; //si se presiona el btn el estado act es presionado
000083 9986      	SBIC 0x10,6
000084 c002      	RJMP _0x8
000085 94e8      	CLT
000086 c001      	RJMP _0x52
                 ; 0000 00BB else adea=1; //si no, el estado tiene el valor de suleto
                 _0x8:
000087 9468      	SET
                 _0x52:
000088 f826      	BLD  R2,6
                 ; 0000 00BC 
                 ; 0000 00BD if( adea==0 && adep==1 ) //si estaba suelto y se presiona
000089 fc26      	SBRC R2,6
00008a c002      	RJMP _0xB
00008b fc27      	SBRC R2,7
00008c c001      	RJMP _0xC
                 _0xB:
00008d c005      	RJMP _0xA
                 _0xC:
                 ; 0000 00BE {
                 ; 0000 00BF PORTA=disp7seg[0]; //despliegue asociado
00008e e2ee      	LDI  R30,LOW(_disp7seg*2)
00008f e0f0      	LDI  R31,HIGH(_disp7seg*2)
000090 d0da      	RCALL SUBOPT_0x1
                 ; 0000 00C0 memoria[i]=0; //posicion de la configuracion del motor asociada
000091 e0a0      	LDI  R26,LOW(0)
000092 d0df      	RCALL SUBOPT_0x2
                 ; 0000 00C1 i++; //se mueve el indice de la memoria
                 ; 0000 00C2 delay_ms(25); //retardo antirebotes
                 ; 0000 00C3 }
                 ; 0000 00C4 if( adea==1 && adep==0 ) //si si estaba presionado y se suelta
                 _0xA:
000093 fe26      	SBRS R2,6
000094 c002      	RJMP _0xE
000095 fe27      	SBRS R2,7
000096 c001      	RJMP _0xF
                 _0xE:
000097 c001      	RJMP _0xD
                 _0xF:
                 ; 0000 00C5 delay_ms(25); //retardo antirebotes
000098 d0de      	RCALL SUBOPT_0x3
                 ; 0000 00C6 adep=adea; //el estado actual se convierte en el estado pasado para la sig iteracion
                 _0xD:
000099 fa26      	BST  R2,6
00009a f827      	BLD  R2,7
                 ; 0000 00C7 }
                 ; 0000 00C8 else PORTA = 0x79; //E (error)
00009b c001      	RJMP _0x10
                 _0x7:
00009c d0dd      	RCALL SUBOPT_0x4
                 ; 0000 00C9 }
                 _0x10:
00009d 9508      	RET
                 ; .FEND
                 ;void checarAtras(){
                 ; 0000 00CB void checarAtras(){
                 _checarAtras:
                 ; .FSTART _checarAtras
                 ; 0000 00CC if( checarEspacio() ){
00009e d0c9      	RCALL SUBOPT_0x0
00009f f0c9      	BREQ _0x11
                 ; 0000 00CD if(rev==0) reva=0; //si se presiona el btn el estado act es presionado
0000a0 9980      	SBIC 0x10,0
0000a1 c002      	RJMP _0x12
0000a2 94e8      	CLT
0000a3 c001      	RJMP _0x53
                 ; 0000 00CE else reva=1; //si no, el estado tiene el valor de suleto
                 _0x12:
0000a4 9468      	SET
                 _0x53:
0000a5 f820      	BLD  R2,0
                 ; 0000 00CF 
                 ; 0000 00D0 if( reva==0 && revp==1 ) //si estaba suelto y se presiona
0000a6 fc20      	SBRC R2,0
0000a7 c002      	RJMP _0x15
0000a8 fc21      	SBRC R2,1
0000a9 c001      	RJMP _0x16
                 _0x15:
0000aa c005      	RJMP _0x14
                 _0x16:
                 ; 0000 00D1 {
                 ; 0000 00D2 PORTA=disp7seg[1]; //despliegue asociado
                +
0000ab e2ef     +LDI R30 , LOW ( 2 * _disp7seg + ( 1 ) )
0000ac e0f0     +LDI R31 , HIGH ( 2 * _disp7seg + ( 1 ) )
                 	__POINTW1FN _disp7seg,1
0000ad d0bd      	RCALL SUBOPT_0x1
                 ; 0000 00D3 memoria[i]=1; //posicion de la configuracion del motor asociada
0000ae e0a1      	LDI  R26,LOW(1)
0000af d0c2      	RCALL SUBOPT_0x2
                 ; 0000 00D4 i++; //se mueve el indice de la memoria
                 ; 0000 00D5 delay_ms(25); //retardo antirebotes
                 ; 0000 00D6 }
                 ; 0000 00D7 if( reva==1 && revp==0 ) //si si estaba presionado y se suelta
                 _0x14:
0000b0 fe20      	SBRS R2,0
0000b1 c002      	RJMP _0x18
0000b2 fe21      	SBRS R2,1
0000b3 c001      	RJMP _0x19
                 _0x18:
0000b4 c001      	RJMP _0x17
                 _0x19:
                 ; 0000 00D8 delay_ms(25); //retardo antirebotes
0000b5 d0c1      	RCALL SUBOPT_0x3
                 ; 0000 00D9 revp=reva; //el estado actual se convierte en el estado pasado para la sig iteracion
                 _0x17:
0000b6 fa20      	BST  R2,0
0000b7 f821      	BLD  R2,1
                 ; 0000 00DA }
                 ; 0000 00DB else PORTA = 0x79; //E (error)
0000b8 c001      	RJMP _0x1A
                 _0x11:
0000b9 d0c0      	RCALL SUBOPT_0x4
                 ; 0000 00DC }
                 _0x1A:
0000ba 9508      	RET
                 ; .FEND
                 ;void checarIzq(){
                 ; 0000 00DE void checarIzq(){
                 _checarIzq:
                 ; .FSTART _checarIzq
                 ; 0000 00DF if( checarEspacio() ){
0000bb d0ac      	RCALL SUBOPT_0x0
0000bc f0c9      	BREQ _0x1B
                 ; 0000 00E0 if(izq==0) izqa=0; //si se presiona el btn el estado act es presionado
0000bd 9982      	SBIC 0x10,2
0000be c002      	RJMP _0x1C
0000bf 94e8      	CLT
0000c0 c001      	RJMP _0x54
                 ; 0000 00E1 else izqa=1; //si no, el estado tiene el valor de suleto
                 _0x1C:
0000c1 9468      	SET
                 _0x54:
0000c2 f822      	BLD  R2,2
                 ; 0000 00E2 
                 ; 0000 00E3 if( izqa==0 && izqp==1 ) //si estaba suelto y se presiona
0000c3 fc22      	SBRC R2,2
0000c4 c002      	RJMP _0x1F
0000c5 fc23      	SBRC R2,3
0000c6 c001      	RJMP _0x20
                 _0x1F:
0000c7 c005      	RJMP _0x1E
                 _0x20:
                 ; 0000 00E4 {
                 ; 0000 00E5 PORTA=disp7seg[2]; //despliegue asociado
                +
0000c8 e3e0     +LDI R30 , LOW ( 2 * _disp7seg + ( 2 ) )
0000c9 e0f0     +LDI R31 , HIGH ( 2 * _disp7seg + ( 2 ) )
                 	__POINTW1FN _disp7seg,2
0000ca d0a0      	RCALL SUBOPT_0x1
                 ; 0000 00E6 memoria[i]=2; //posicion de la configuracion del motor asociada
0000cb e0a2      	LDI  R26,LOW(2)
0000cc d0a5      	RCALL SUBOPT_0x2
                 ; 0000 00E7 i++; //se mueve el indice de la memoria
                 ; 0000 00E8 delay_ms(25); //retardo antirebotes
                 ; 0000 00E9 }
                 ; 0000 00EA if( izqa==1 && izqp==0 ) //si si estaba presionado y se suelta
                 _0x1E:
0000cd fe22      	SBRS R2,2
0000ce c002      	RJMP _0x22
0000cf fe23      	SBRS R2,3
0000d0 c001      	RJMP _0x23
                 _0x22:
0000d1 c001      	RJMP _0x21
                 _0x23:
                 ; 0000 00EB delay_ms(25); //retardo antirebotes
0000d2 d0a4      	RCALL SUBOPT_0x3
                 ; 0000 00EC izqp=izqa; //el estado actual se convierte en el estado pasado para la sig iteracion
                 _0x21:
0000d3 fa22      	BST  R2,2
0000d4 f823      	BLD  R2,3
                 ; 0000 00ED }
                 ; 0000 00EE else PORTA = 0x79; //E (error)
0000d5 c001      	RJMP _0x24
                 _0x1B:
0000d6 d0a3      	RCALL SUBOPT_0x4
                 ; 0000 00EF }
                 _0x24:
0000d7 9508      	RET
                 ; .FEND
                 ;void checarDer(){
                 ; 0000 00F1 void checarDer(){
                 _checarDer:
                 ; .FSTART _checarDer
                 ; 0000 00F2 if( checarEspacio() ){
0000d8 d08f      	RCALL SUBOPT_0x0
0000d9 f0c9      	BREQ _0x25
                 ; 0000 00F3 if(der==0) dera=0; //si se presiona el btn el estado act es presionado
0000da 9984      	SBIC 0x10,4
0000db c002      	RJMP _0x26
0000dc 94e8      	CLT
0000dd c001      	RJMP _0x55
                 ; 0000 00F4 else dera=1; //si no, el estado tiene el valor de suleto
                 _0x26:
0000de 9468      	SET
                 _0x55:
0000df f824      	BLD  R2,4
                 ; 0000 00F5 
                 ; 0000 00F6 if( dera==0 && derp==1 ) //si estaba suelto y se presiona
0000e0 fc24      	SBRC R2,4
0000e1 c002      	RJMP _0x29
0000e2 fc25      	SBRC R2,5
0000e3 c001      	RJMP _0x2A
                 _0x29:
0000e4 c005      	RJMP _0x28
                 _0x2A:
                 ; 0000 00F7 {
                 ; 0000 00F8 PORTA=disp7seg[3]; //despliegue asociado
                +
0000e5 e3e1     +LDI R30 , LOW ( 2 * _disp7seg + ( 3 ) )
0000e6 e0f0     +LDI R31 , HIGH ( 2 * _disp7seg + ( 3 ) )
                 	__POINTW1FN _disp7seg,3
0000e7 d083      	RCALL SUBOPT_0x1
                 ; 0000 00F9 memoria[i]=3; //posicion de la configuracion del motor asociada
0000e8 e0a3      	LDI  R26,LOW(3)
0000e9 d088      	RCALL SUBOPT_0x2
                 ; 0000 00FA i++; //se mueve el indice de la memoria
                 ; 0000 00FB delay_ms(25); //retardo antirebotes
                 ; 0000 00FC }
                 ; 0000 00FD if( dera==1 && derp==0 ) //si si estaba presionado y se suelta
                 _0x28:
0000ea fe24      	SBRS R2,4
0000eb c002      	RJMP _0x2C
0000ec fe25      	SBRS R2,5
0000ed c001      	RJMP _0x2D
                 _0x2C:
0000ee c001      	RJMP _0x2B
                 _0x2D:
                 ; 0000 00FE delay_ms(25); //retardo antirebotes
0000ef d087      	RCALL SUBOPT_0x3
                 ; 0000 00FF derp=dera; //el estado actual se convierte en el estado pasado para la sig iteracion
                 _0x2B:
0000f0 fa24      	BST  R2,4
0000f1 f825      	BLD  R2,5
                 ; 0000 0100 }
                 ; 0000 0101 else PORTA = 0x79; //E (error)
0000f2 c001      	RJMP _0x2E
                 _0x25:
0000f3 d086      	RCALL SUBOPT_0x4
                 ; 0000 0102 }
                 _0x2E:
0000f4 9508      	RET
                 ; .FEND
                 ;void checarGo(){
                 ; 0000 0104 void checarGo(){
                 _checarGo:
                 ; .FSTART _checarGo
                 ; 0000 0105 if(go==0) goa=0; //si se presiona el btn el estado act es presionado
0000f5 99b0      	SBIC 0x16,0
0000f6 c002      	RJMP _0x2F
0000f7 94e8      	CLT
0000f8 c001      	RJMP _0x56
                 ; 0000 0106 else goa=1; //si no, el estado tiene el valor de suleto
                 _0x2F:
0000f9 9468      	SET
                 _0x56:
0000fa f830      	BLD  R3,0
                 ; 0000 0107 
                 ; 0000 0108 if( goa==0 && gop==1 ) //si estaba suelto y se presiona
0000fb fc30      	SBRC R3,0
0000fc c002      	RJMP _0x32
0000fd fc31      	SBRC R3,1
0000fe c001      	RJMP _0x33
                 _0x32:
0000ff c001      	RJMP _0x31
                 _0x33:
                 ; 0000 0109 {
                 ; 0000 010A delay_ms(25); //retardo antirebotes
000100 d076      	RCALL SUBOPT_0x3
                 ; 0000 010B }
                 ; 0000 010C if( goa==1 && gop==0 ) //si si estaba presionado y se suelta
                 _0x31:
000101 fe30      	SBRS R3,0
000102 c002      	RJMP _0x35
000103 fe31      	SBRS R3,1
000104 c001      	RJMP _0x36
                 _0x35:
000105 c01b      	RJMP _0x34
                 _0x36:
                 ; 0000 010D {
                 ; 0000 010E for(;j<i;j++)
                 _0x38:
000106 1445      	CP   R4,R5
000107 f4a0      	BRSH _0x39
                 ; 0000 010F {
                 ; 0000 0110 PORTA=disp7seg[memoria[j]]; //despliegue asociado
000108 d074      	RCALL SUBOPT_0x5
000109 5de2      	SUBI R30,LOW(-_disp7seg*2)
00010a 4fff      	SBCI R31,HIGH(-_disp7seg*2)
00010b 9004      	LPM  R0,Z
00010c ba0b      	OUT  0x1B,R0
                 ; 0000 0111 PORTC=motor[memoria[j]];    //movimiento asociado
00010d d06f      	RCALL SUBOPT_0x5
00010e 5de6      	SUBI R30,LOW(-_motor*2)
00010f 4fff      	SBCI R31,HIGH(-_motor*2)
000110 9004      	LPM  R0,Z
000111 ba05      	OUT  0x15,R0
                 ; 0000 0112 delay_ms(1000); //retardo para que se mueva la abejita :3
000112 eea8      	LDI  R26,LOW(1000)
000113 e0b3      	LDI  R27,HIGH(1000)
000114 d06f      	RCALL _delay_ms
                 ; 0000 0113 PORTC=0x00; //se detiene el motor
000115 e0e0      	LDI  R30,LOW(0)
000116 bbe5      	OUT  0x15,R30
                 ; 0000 0114 PORTA=0x00; //se apaga el display
000117 bbeb      	OUT  0x1B,R30
                 ; 0000 0115 
                 ; 0000 0116 checarPause();
000118 d00b      	RCALL _checarPause
                 ; 0000 0117 checarClr();
000119 d021      	RCALL _checarClr
                 ; 0000 0118 }
00011a 9443      	INC  R4
00011b cfea      	RJMP _0x38
                 _0x39:
                 ; 0000 0119 if(j==i) PORTA=0x40;
00011c 1454      	CP   R5,R4
00011d f411      	BRNE _0x3A
00011e e4e0      	LDI  R30,LOW(64)
00011f bbeb      	OUT  0x1B,R30
                 ; 0000 011A delay_ms(25);
                 _0x3A:
000120 d056      	RCALL SUBOPT_0x3
                 ; 0000 011B }
                 ; 0000 011C gop=goa; //el estado actual se convierte en el estado pasado para la sig iteracion
                 _0x34:
000121 fa30      	BST  R3,0
000122 f831      	BLD  R3,1
                 ; 0000 011D }
000123 9508      	RET
                 ; .FEND
                 ;void checarPause(){
                 ; 0000 011F void checarPause(){
                 _checarPause:
                 ; .FSTART _checarPause
                 ; 0000 0120 if (pause == 0){
000124 99b3      	SBIC 0x16,3
000125 c002      	RJMP _0x3B
                 ; 0000 0121 pa=0;
000126 94e8      	CLT
000127 c001      	RJMP _0x57
                 ; 0000 0122 }
                 ; 0000 0123 else pa=1;
                 _0x3B:
000128 9468      	SET
                 _0x57:
000129 f832      	BLD  R3,2
                 ; 0000 0124 
                 ; 0000 0125 if( pa==0 && pp==1){
00012a fc32      	SBRC R3,2
00012b c002      	RJMP _0x3E
00012c fc33      	SBRC R3,3
00012d c001      	RJMP _0x3F
                 _0x3E:
00012e c00b      	RJMP _0x3D
                 _0x3F:
                 ; 0000 0126 while(1){
                 _0x40:
                 ; 0000 0127 if(go==0){
00012f 99b0      	SBIC 0x16,0
000130 c003      	RJMP _0x43
                 ; 0000 0128 gop=1;
000131 9468      	SET
000132 f831      	BLD  R3,1
                 ; 0000 0129 break;
000133 c006      	RJMP _0x42
                 ; 0000 012A }
                 ; 0000 012B if(clr==0){
                 _0x43:
000134 99b6      	SBIC 0x16,6
000135 c003      	RJMP _0x44
                 ; 0000 012C cp=1;
000136 9468      	SET
000137 f835      	BLD  R3,5
                 ; 0000 012D break;
000138 c001      	RJMP _0x42
                 ; 0000 012E }
                 ; 0000 012F }
                 _0x44:
000139 cff5      	RJMP _0x40
                 _0x42:
                 ; 0000 0130 //delay_ms(25);
                 ; 0000 0131 }
                 ; 0000 0132 }
                 _0x3D:
00013a 9508      	RET
                 ; .FEND
                 ;void checarClr(){
                 ; 0000 0134 void checarClr(){
                 _checarClr:
                 ; .FSTART _checarClr
                 ; 0000 0135 if( clr == 0 ) ca=0;
00013b 99b6      	SBIC 0x16,6
00013c c002      	RJMP _0x45
00013d 94e8      	CLT
00013e c001      	RJMP _0x58
                 ; 0000 0136 else ca=1;
                 _0x45:
00013f 9468      	SET
                 _0x58:
000140 f834      	BLD  R3,4
                 ; 0000 0137 
                 ; 0000 0138 if( ca==0 && cp ==1){
000141 fc34      	SBRC R3,4
000142 c002      	RJMP _0x48
000143 fc35      	SBRC R3,5
000144 c001      	RJMP _0x49
                 _0x48:
000145 c011      	RJMP _0x47
                 _0x49:
                 ; 0000 0139 for(i=0; i<20; i++){
000146 2455      	CLR  R5
                 _0x4B:
000147 e1e4      	LDI  R30,LOW(20)
000148 165e      	CP   R5,R30
000149 f440      	BRSH _0x4C
                 ; 0000 013A memoria[i]=0;
00014a 2de5      	MOV  R30,R5
00014b e0f0      	LDI  R31,0
00014c 52e0      	SUBI R30,LOW(-_memoria)
00014d 4fff      	SBCI R31,HIGH(-_memoria)
00014e e0a0      	LDI  R26,LOW(0)
00014f 83a0      	STD  Z+0,R26
                 ; 0000 013B }
000150 9453      	INC  R5
000151 cff5      	RJMP _0x4B
                 _0x4C:
                 ; 0000 013C i=0;
000152 2455      	CLR  R5
                 ; 0000 013D j=0;
000153 2444      	CLR  R4
                 ; 0000 013E PORTA=0x40;
000154 e4e0      	LDI  R30,LOW(64)
000155 bbeb      	OUT  0x1B,R30
                 ; 0000 013F delay_ms(25);
000156 d020      	RCALL SUBOPT_0x3
                 ; 0000 0140 }
                 ; 0000 0141 if( ca==1 && cp==0) delay_ms(25);
                 _0x47:
000157 fe34      	SBRS R3,4
000158 c002      	RJMP _0x4E
000159 fe35      	SBRS R3,5
00015a c001      	RJMP _0x4F
                 _0x4E:
00015b c001      	RJMP _0x4D
                 _0x4F:
00015c d01a      	RCALL SUBOPT_0x3
                 ; 0000 0142 cp=ca;
                 _0x4D:
00015d fa34      	BST  R3,4
00015e f835      	BLD  R3,5
                 ; 0000 0143 }
00015f 9508      	RET
                 ; .FEND
                 ;unsigned char checarEspacio(){
                 ; 0000 0145 unsigned char checarEspacio(){
                 _checarEspacio:
                 ; .FSTART _checarEspacio
                 ; 0000 0146 if( i>=tam ) return 0;
000160 e2e8      	LDI  R30,LOW(40)
000161 165e      	CP   R5,R30
000162 f010      	BRLO _0x50
000163 e0e0      	LDI  R30,LOW(0)
000164 9508      	RET
                 ; 0000 0147 else return 1;
                 _0x50:
000165 e0e1      	LDI  R30,LOW(1)
000166 9508      	RET
                 ; 0000 0148 }
000167 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _memoria:
0000e0           	.BYTE 0x28
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000168 dff7      	RCALL _checarEspacio
000169 30e0      	CPI  R30,0
00016a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
00016b 9004      	LPM  R0,Z
00016c ba0b      	OUT  0x1B,R0
00016d 2de5      	MOV  R30,R5
00016e e0f0      	LDI  R31,0
00016f 52e0      	SUBI R30,LOW(-_memoria)
000170 4fff      	SBCI R31,HIGH(-_memoria)
000171 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x2:
000172 83a0      	STD  Z+0,R26
000173 9453      	INC  R5
000174 e1a9      	LDI  R26,LOW(25)
000175 e0b0      	LDI  R27,0
000176 c00d      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x3:
000177 e1a9      	LDI  R26,LOW(25)
000178 e0b0      	LDI  R27,0
000179 c00a      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00017a e7e9      	LDI  R30,LOW(121)
00017b bbeb      	OUT  0x1B,R30
00017c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00017d 2de4      	MOV  R30,R4
00017e e0f0      	LDI  R31,0
00017f 52e0      	SUBI R30,LOW(-_memoria)
000180 4fff      	SBCI R31,HIGH(-_memoria)
000181 81e0      	LD   R30,Z
000182 e0f0      	LDI  R31,0
000183 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 _delay_ms:
000184 9610      	adiw r26,0
000185 f039      	breq __delay_ms1
                 __delay_ms0:
000186 95a8      	wdr
                +
000187 ef8a     +LDI R24 , LOW ( 0xFA )
000188 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000189 9701     +SBIW R24 , 1
00018a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00018b 9711      	sbiw r26,1
00018c f7c9      	brne __delay_ms0
                 __delay_ms1:
00018d 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535 register use summary:
r0 :  10 r1 :   1 r2 :  28 r3 :  19 r4 :   5 r5 :  10 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  15 r27:   5 r28:   1 r29:   1 r30:  85 r31:  16 
x  :   3 y  :   0 z  :  13 
Registers used: 17 out of 35 (48.6%)

ATmega8535 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   1 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :  15 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   6 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :   6 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   6 cbi   :   0 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   5 
cls   :   0 clt   :   7 clv   :   0 clz   :   0 com   :   0 cp    :   4 
cpc   :   0 cpi   :   1 cpse  :   0 dec   :   1 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 
inc   :   3 ld    :   1 ldd   :   0 ldi   :  53 lds   :   0 lpm   :  13 
lsl   :   0 lsr   :   0 mov   :   3 movw  :   3 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  48 
pop   :   0 push  :   0 rcall :  37 ret   :  15 reti  :   0 rjmp  :  91 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   5 sbi   :   0 sbic  :   9 
sbis  :   0 sbiw  :   5 sbr   :   0 sbrc  :  14 sbrs  :  12 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   9 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   3 std   :   2 
sts   :   0 sub   :   0 subi  :   5 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 33 out of 114 (28.9%)

ATmega8535 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00031c    770     26    796    8192   9.7%
[.dseg] 0x000060 0x000108      0     40     40     512   7.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 2 warnings
